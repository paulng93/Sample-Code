/*************************************************************************
    File: SyncWithMonitor.java
    Author: Kelvin Sung
    Date: 4/26/2005

    SyncWithMonitor: simple object to show synchronized methods and the
                    wait/notify/notifyAll functions
*************************************************************************/
public class SyncWithMonitor {
   public synchronized void WaitOnSyncWithMonitor(int tid) {
        try {
            wait();
        } catch (Exception e) {
            System.err.println("SyncWithMonitor:WaitOnSyncWithMonitor wait faile!" + e);
        }
        System.err.println("SyncWithMonitor:WaitOnSyncWithMonitor is awake tid=" + tid);
    }

    public synchronized void WakeAllSyncWithMonitor() {
        notifyAll();
    }

    public synchronized void WakeOneSyncWithMonitor() {
        notify();
    }

    public void WakeAllSyncWithObject(Object syncObject) {
        synchronized(syncObject) {
            syncObject.notifyAll();
        }
    }
}


/*************************************************************************
	File: MonitorSyncThread.java
	Author: Kelvin Sung
	Date: 4/26/2005

	MonitorSyncThread: simple thread to show waiting on a monitor function
*************************************************************************/
import java.io.*;

//
// class: MonitorSyncThread
//
// 		Really Really, *no really* stupid thread
//      continuously call SyncWithMonitor::WaitOnSyncWithMonitorSync() funtion
//
class MonitorSyncThread extends Thread {
	//
	private	int					threadID;
	private boolean    			shouldDie;
	private SyncWithMonitor 	monitorSyncObj;
	
	MonitorSyncThread(int id, SyncWithMonitor t) {
		threadID = id;
		monitorSyncObj = t;
		shouldDie = false;
		System.err.println("Creating new thread: id= [" + threadID + "]");
	}

	void GoDie() {	shouldDie = true; }

	public void run() {
		while (!shouldDie) {
			monitorSyncObj.WaitOnSyncWithMonitor(threadID);
			System.err.println("**** Monitor Sync Thread: id=[" + threadID + "]: just got woke up, continue ...");
		}
		System.err.println("**** Monitor Sync Thread: id=[" + threadID + "]: going to die");
		return;
	}
};



/*************************************************************************
	File: ObjectSyncThread.java
	Author: Kelvin Sung
	Date: 4/26/2005

	ObjectSyncThread: simple thread showing waiting on any object
*************************************************************************/
import java.io.*;
//
// class: ObjectSyncThread
//
// 		Really Really, *no really* stupid thread
//      continuously call object.wait() function!
//
class ObjectSyncThread extends Thread {
	//
	private	int					threadID;
	private boolean    			shouldDie;
	private Object 				syncObject;

	ObjectSyncThread(int id, Object o) {
		threadID = id;
		syncObject = o;
		shouldDie = false;
		System.err.println("Creating new thread: id= [" + threadID + "]");
	}

	void GoDie() {
		shouldDie = true;
	}


	public void run() {
		while (!shouldDie) {
			synchronized(syncObject) {
				try {
					syncObject.wait();
				} catch (Exception e) {
					System.err.println("ObjectSyncThread:wait failed!" + e);
				}
			}
			System.err.println("\n");
			System.err.println("**** Object Sync Thread: id=[" + threadID + "]: just got woke up, continue ...");
			System.err.println("\n");
		}
		System.err.println("**** Object Sync Thread: id=[" + threadID + "]: going to die");
		return;
	}
};








/*************************************************************************
	File: SimpleThread.java
	Author: Kelvin Sung
	Date: 4/25/2005

1. simple_thread: who is waiting on whom? And how to wake them all up?
*************************************************************************/


import java.io.*;
import java.util.*;


public class SimpleThread {

	public static void main(String args[]) {

		SyncWithMonitor monitorSync = new SyncWithMonitor();
		Object syncObj = new Object();	// we can syn on any object!

		MonitorSyncThread monitorSyncThreads[];
		monitorSyncThreads = new MonitorSyncThread[2];
		monitorSyncThreads[0] = new MonitorSyncThread(1, monitorSync);
		monitorSyncThreads[1] = new MonitorSyncThread(2, monitorSync);
		monitorSyncThreads[0].start();
		monitorSyncThreads[1].start();

		ObjectSyncThread objSyncThreads[];
		objSyncThreads = new ObjectSyncThread[2];
		objSyncThreads[0] = new ObjectSyncThread(3, syncObj);
		objSyncThreads[1] = new ObjectSyncThread(4, syncObj);
		objSyncThreads[0].start();
		objSyncThreads[1].start();


		try { 
			//
			// Set up to read from keyboard
			InputStreamReader is = new InputStreamReader( System.in );
			BufferedReader br = new BufferedReader(is);
			String inputLine;
			StringTokenizer st;
			int choice = 1;

			while (choice != 0) {
				System.out.println("0 - to quit");
				System.out.println("1 - Wake up one of the threads waiting on object ");
				System.out.println("2 - Wake up all the threads waiting on object ");

				System.out.println("");
				System.out.println("3 - Wake up one of the threads waiting on monitor ");
				System.out.println("4 - Wake up all the threads waiting on monitor ");

				System.out.println("");
				System.out.println("5 - Wake up all the threads waiting on object from MonitorSyncObject!");

				System.out.println("");
				System.out.print("Your Choice? ");

				inputLine = br.readLine();
				st = new StringTokenizer(inputLine);
				choice = Integer.parseInt(st.nextToken());

				switch (choice) {
					case 1:
						synchronized(syncObj) {
							syncObj.notify();
						}
						break;

					case 2:
						synchronized(syncObj) {
							syncObj.notifyAll();
						}
						break;

					case 3:
						monitorSync.WakeOneSyncWithMonitor();
						break;
					case 4:
						monitorSync.WakeAllSyncWithMonitor();
						break;

					case 5:
						monitorSync.WakeAllSyncWithObject(syncObj);
						break;
				}
				Thread.sleep(1);
				System.out.println("");
			}

			System.out.println(" main thread going to quit ... ");

			monitorSyncThreads[0].GoDie();
			monitorSyncThreads[1].GoDie();
			monitorSync.WakeAllSyncWithMonitor();

			objSyncThreads[0].GoDie();
			objSyncThreads[1].GoDie();
			synchronized(syncObj) {
				syncObj.notifyAll();
			}

		} catch (IOException e)  {
			System.err.println("IO Error:" + e);
		} catch (Exception e) {
			System.err.println("Other exception" + e);
		}

	}

};
